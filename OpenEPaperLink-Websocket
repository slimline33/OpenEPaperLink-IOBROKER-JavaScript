const serverIP = '192.168.X.XX';  //z.B. 192.168.10.71

/// AB HIER NICHTS MEHR ÄNDERN!

const WebSocket = require('ws');
const http = require('http');
const https = require('https');
const wsUrl = `ws://${serverIP}/ws`;  // WebSocket-URL

let ws;
let pingInterval;

function ensureOpenEPaperLinkFolderExists(callback) {
    const OpenEPaperLinkFolderPath = '0_userdata.0.OpenEPaperLink';
    getObject(OpenEPaperLinkFolderPath, (err, obj) => {
        if (err || !obj) {
            setObject(OpenEPaperLinkFolderPath, {
                type: 'channel',
                common: { name: 'Open E-Paper Link' },
                native: {}
            }, callback);
        } else {
            callback();
        }
    });
}

function ensureChannelExists(path, alias, callback) {
    getObject(path, (err, obj) => {
        if (err || !obj) {
            setObject(path, {
                type: 'channel',
                common: { name: alias || 'Unbekanntes Gerät' },
                native: {}
            }, callback);
        } else if (obj.common.name !== alias) {
            extendObject(path, { common: { name: alias } }, callback);
        } else {
            callback();
        }
    });
}

function createStateAndSet(statePath, value) {
    setObject(statePath, {
        type: 'state',
        common: {
            name: statePath.split('.').pop(),
            type: 'string',
            role: 'value',
            read: true,
            write: true
        },
        native: {}
    }, (err) => {
        if (!err) {
            setState(statePath, String(value), true);
        }
    });
}

function updateStateIfChanged(statePath, value) {
    getState(statePath, (err, state) => {
        if (err || !state) {
            createStateAndSet(statePath, String(value));
        } else if (state.val !== String(value)) {
            setState(statePath, String(value), true);
        }
    });
}

function fetchDimensions(hwType, callback) {
    const hwTypeHex = hwType.toString(16).padStart(2, '0').toUpperCase();  // Convert hwType to two-digit uppercase hexadecimal
    const url = `http://${serverIP}/tagtypes/${hwTypeHex}.json`;
    http.get(url, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const dimensions = JSON.parse(data);
                    callback(null, dimensions);
                } catch (e) {
                    callback(`Error parsing JSON from ${url}: ${e}`);
                }
            } else {
                fetchFromGithub(hwTypeHex, callback);
            }
        });
    }).on('error', (err) => {
        fetchFromGithub(hwTypeHex, callback);
    });
}

function fetchFromGithub(hwTypeHex, callback) {
    const githubUrl = `https://github.com/OpenEPaperLink/OpenEPaperLink/tree/master/resources/tagtypes/${hwTypeHex}.json`;
    https.get(githubUrl, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const dimensions = JSON.parse(data);
                    callback(null, dimensions);
                } catch (e) {
                    callback(`Error parsing JSON from ${githubUrl}: ${e}`);
                }
            } else {
                callback(`HTTP Error ${res.statusCode} from ${githubUrl}`);
            }
        });
    }).on('error', (err) => {
        callback(`Error fetching ${githubUrl}: ${err.message}`);
    });
}

function handleHWType(basePath, hwType) {
    createStateAndSet(`${basePath}.hwType`, String(hwType));  // Save hwType as a state
    fetchDimensions(hwType, (err, dimensions) => {
        if (!err && dimensions) {
            createStateAndSet(`${basePath}.height`, String(dimensions.height));
            createStateAndSet(`${basePath}.width`, String(dimensions.width));
            createStateAndSet(`${basePath}.name`, String(dimensions.name));
            if (dimensions.colors) {
                createStateAndSet(`${basePath}.colors`, String(dimensions.colors));
            }
            if (dimensions.colortable) {
                createStateAndSet(`${basePath}.colortable`, JSON.stringify(dimensions.colortable));
            }
        } else {
            console.error(`Failed to fetch or set dimensions for hwType ${hwType}: ${err}`);
        }
    });
}

function connectWebSocket() {
    ws = new WebSocket(wsUrl);
    ws.on('open', function open() {
        console.log('Verbunden mit WebSocket');
        startHeartbeat();
    });

    ws.on('message', function incoming(data) {
        console.log('Daten empfangen:', data);
        if (data) {
            try {
                let parsedData = JSON.parse(data);
                console.log('Verarbeitete Daten:', JSON.stringify(parsedData, null, 2));
                handleData(parsedData);
            } catch (err) {
                console.error('Fehler bei der Verarbeitung der Daten:', err);
            }
        } else {
            console.log('Keine Daten oder leere Nachricht empfangen');
        }
    });

    ws.on('close', function close() {
        console.log('WebSocket-Verbindung geschlossen, versuche neu zu verbinden...');
        clearInterval(pingInterval);
        setTimeout(connectWebSocket, 5000);
    });

    ws.on('error', function error(err) {
        console.error('WebSocket-Fehler:', err);
    });
}

function startHeartbeat() {
    pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            ws.ping(() => console.log('Ping sent'));
        }
    }, 10000); // Send ping every 10 seconds

    ws.on('pong', () => {
        console.log('Pong received');
    });
}

function handleData(parsedData) {
    if (parsedData.tags && Array.isArray(parsedData.tags)) {
        parsedData.tags.forEach(tag => {
            let basePath = `0_userdata.0.OpenEPaperLink.${tag.mac.replace(/:/g, '')}`;
            ensureChannelExists(basePath, tag.alias, () => {
                Object.keys(tag).forEach(key => {
                    let statePath = `${basePath}.${key}`;
                    let value = tag[key];
                    updateStateIfChanged(statePath, value);
                    if (key === 'hwType') {
                        handleHWType(basePath, tag.hwType);
                    }
                });
            });
        });
    }
}

connectWebSocket();
